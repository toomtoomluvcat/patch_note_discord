package service

import (
	"dockertest/connect"
	"dockertest/format"
	"dockertest/schema"
	"fmt"
	"time"
)

func CalendarCreate(title string, assignment time.Time, userID string) string {
	calendar := schema.Calendar{
		Title:       title,
		DueDateTime: assignment,
		AccountID:   userID,
	}
	if result := connect.DB.Model(&schema.Calendar{}).
		Create(&calendar); result.Error != nil {
		return "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞"

	}

	return format.ThaiDate(title, assignment, calendar.ID, userID)
}

func GetTaskByPeriod(userID string, period int64) string {

	loc, _ := time.LoadLocation("Asia/Bangkok")
	now := time.Now().In(loc)

	startOfDay := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, loc)
	endOfDay := startOfDay.Add(24*time.Hour*time.Duration(period) - time.Nanosecond)

	var task []schema.Calendar
	if err := connect.DB.Order("due_date_time ASC").Where("account_id = ? AND due_date_time >= ? AND due_date_time <= ?", userID, startOfDay, endOfDay).Find(&task).Error; err != nil {
		fmt.Println(err)
	}

	if len(task) == 0 {
		return "üîç ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏∞ "
	}
	var result string
	for i, t := range task {
		result += format.ShowThaiDate(int(t.ID), i+1, t.Title, t.DueDateTime)
	}

	var periodType string
	if period == 1 {
		periodType = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
	} else if period == 7 {
		periodType = "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ"
	} else {
		periodType = "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
	}

	return fmt.Sprintf("‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <@%s>  ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô%s\n.%s", userID, periodType, result)
}

func DeleteTaskByID(userID string, taskID uint) string {
	var task schema.Calendar

	if err := connect.DB.Where("account_id = ? AND id = ?", userID, taskID).First(&task).Error; err != nil {
		return "üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ TaskID ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞"

	}

	if result := connect.DB.Where("account_id = ? AND ID = ?", userID, taskID).Delete(&schema.Calendar{}); result.Error != nil {
		return "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞"

	}
	return fmt.Sprintf(
		"‚úÖ ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß <@%s>!\n"+
			"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"+
			"üî¢ TaskID: `%d`\n"+
			"üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: **%s**\n"+
			"üóëÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
		userID, taskID, task.Title,
	)

}

func GetTaskByTimeRange(startTime time.Time, endTime time.Time, userID string) string {
	var task []schema.Calendar

	if err := connect.DB.Order("due_date_time ASC").Where("account_id = ? AND due_date_time >= ? AND due_date_time <= ?", userID, startTime, endTime).Find(&task).Error; err != nil {
		fmt.Println(err)
	}

	if len(task) == 0 {
		return "üîç ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏∞ "

	}
	var result string
	for i, t := range task {
		result += format.ShowThaiDate(int(t.ID), i+1, t.Title, t.DueDateTime)
	}
	return fmt.Sprintf("‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á <@%s> ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡∏Ç‡∏≠‡∏°‡∏≤! \n.%s", userID, result)

}
